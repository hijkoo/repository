user  mosh;
worker_processes  4;

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/info.log  info;
pid        logs/nginx.pid;

events {
    worker_connections  10240;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" $request_time '
                      '$status $body_bytes_sent "$http_referer" '
                      '$upstream_response_time  $upstream_addr'
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  logs/access.log  main;
    error_log   logs/error.log;

    sendfile     on;  #default on; 调用两个文件描述符直接传递数据，完全在内核中操作
    tcp_nopush   on;  #defalut off; 一起发送多个数据集合（例如HTTP响应的头和正文），当包累计到一定大小后就发送
    #tcp_nodelay on;  #default on;  禁用了Nagle 算法。数据包立即发送出去,可能会产生太多数据包过载。 与tcp_nopush 互斥

    keepalive_timeout  65 65; #default 75s
    keepalive_requests 1000; #default 100; QPS过高的情况下 需要加大，避免大量time_wait产生。

    gzip on;
    gzip_types text/plain application/x-javascript text/css application/xml text/javascript;

    upstream default_upstream {
        server 0.0.0.0;
    }

    #proxy_next_upstream error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 |http_404 | off ...; 

    lua_package_path '../?.lua;./webroot/?.lua;/usr/local/lor/?.lua;;';
    lua_code_cache off;
    lua_shared_dict gateway_data 20m;   #基础业务数据
    lua_shared_dict rate_limit 10m;     #限速插件数据
    lua_shared_dict api_stat 10m;       #API统计数据
    lua_shared_dict status_stat 10m;    #状态码统计数据

    init_by_lua_block {
        local gateway = require "gateway.gateway"
        local config = gateway.init()

        -- the gateway context
        context = {
            gateway = gateway,
            config = config
        }
    }

    init_worker_by_lua_block {
        local gateway = context.gateway
        gateway.init_worker()   
    }

    #include lua.conf;
    include vhost/*.conf;
}
