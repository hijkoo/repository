###context http
#keys_zone=cache1:100m 表示这个zone名称为cache1，分配的内存大小为100MB
#//tmp/nginx/proxy_cache_path 表示cache1这个zone的文件要存放的目录
#levels=1:2 表示缓存目录的第一级目录是1个字符，第二级目录是2个字符，即/usr/local/nginx/proxy_cache_dir/cache1/a/1b这种形式
#inactive=1d 表示这个zone中的缓存文件如果在1天内都没有被访问，那么文件会被cache manager进程删除掉
#max_size=1g 表示这个zone的硬盘容量为1GB
#proxy_temp_path   /tmp/nginx/proxy_temp_dir 1 2;
#proxy_cache_path  /tmp/nginx/proxy_cache_path/cache1  levels=1:2 keys_zone=cache1:100m inactive=1d max_size=1g;

###context server
#add_header X-Cache $upstream_cache_status; #$upstream_cache_status表示资源缓存的状态，有HIT MISS EXPIRED三种状态

###context location
#proxy_cache cache1;                         #设置资源缓存的zone
#proxy_cache_key $host$uri$is_args$args;     #设置缓存的key
#proxy_cache_valid 200 304 1m;               #设置状态码为200和304的响应可以进行缓存，并且缓存时间为1分钟

###context http
#map $args $debug {
#    default false;
#    debug   true;
#}

split_clients "${remote_addr}AAA" $variant {
    1%  percent1;
    5%  percent5;
    10% percent10;
    20% percent20;
    50% percent50;
    * "default";
}

server {
    listen 443;
    ssl on;
    ssl_certificate /home/pubsrv/openresty/nginx/conf/vhost/cert/evente/evente.pem;
    ssl_certificate_key /home/pubsrv/openresty/nginx/conf/vhost/cert/evente/evente.key;
    server_name  gw.evente.cn localhost 39.105.4.117;

    access_log logs/gw-access.log;
    error_log  logs/gw-error.log;
    error_log  logs/gw-info.log  info;


    location / {
        #解决跨域问题
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Headers' 'Content-Type';
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*';
        } 

        set $upstream_host $host;
        set $upstream_url 'http://default_upstream';

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Scheme $scheme;
        proxy_set_header Request-Url $request_uri;
        proxy_http_version 1.1;         #强制将http改成v1.1
        proxy_set_header Connection ""; #忽略下游的Connection

        proxy_pass $upstream_url;
        proxy_connect_timeout 3s;       #nginx与upstream server 的连接超时时间
        proxy_read_timeout 3;           #nginx接收upstream server数据超时, 默认60s, 如果连续的60s内没有收到1个字节, 连接关闭
        proxy_send_timeout 3;           #nginx发送数据至upstream server超时, 默认60s, 如果连续的60s内没有发送1个字节, 连接关闭

        #expires 1m; #浏览器缓存时间

        rewrite_by_lua_block {
            local gateway = context.gateway
            gateway.redirect()
            --gateway.rewrite()
        }
        access_by_lua_block {
            local gateway = context.gateway
            gateway.access()
        }

        header_filter_by_lua_block {
            local gateway = context.gateway
            gateway.header_filter()
        }
        body_filter_by_lua_block {
            local gateway = context.gateway
            gateway.body_filter()
        }
        log_by_lua_block {
            local gateway = context.gateway
            gateway.log()
        }
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
}

server {
    # List port
    listen 8866;

    access_log logs/dashbord-access.log;
    error_log logs/dashbord-error.log;
    error_log  logs/dashbord-info.log  info;

    # this variable is for view render（lua-resty-template)
    set $template_root '';

    location /static {
        alias ../webroot/app/static; #app/static;
    }

    # lor runtime
    location / {
        content_by_lua_file ../webroot/app/main.lua;
    }
}
